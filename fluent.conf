# Input and parse HAProxy syslog.
<source>
  @type syslog
  tag haproxy
  port 514
  bind 0.0.0.0
  <parse>
    @type regexp
  # Matches HAProxy 1.8 rfc5424 HTTP logs, with a catch-all for other log types.
    expression /^(?<syslog_id>\<\d{1,5}\>)?\d{1,2} (?<syslog_time>[^ ]+) (?<syslog_host>[^ ]+) (?<ps>\w+) (?<pid>\d+) ([^ ]+) ((\[(.*)\]|[^ ])) ((?<client_ip>[\w\.]+):(?<client_port>\d+) \[(?<req_date>.+)\] (?<frontend>[\w\~-]+) (?<backend>[\w-]+)\/(?<backend_server>[^ ]+) (?<tr_receive_time>[^\/]+)\/(?<tw_queue_time>[^\/]+)\/(?<tc_connect_time>[^\/]+)\/(?<tr_resp_time>[^\/]+)\/(?<ta_active_time>[^\/]+) (?<status_code>\d+) (?<bytes_read>\d+) (?<req_cookie>[^ ]+) (?<res_cookie>[^ ]+) (?<term_state>[\w-]+) (?<actconn>\d+)\/(?<feconn>\d+)\/(?<beconn>\d+)\/(?<srv_conn>\d+)\/(?<retries>\d+) (?<srv_queue>\d+)\/(?<backend_queue>\d+) \{?(?<req_headers>[^}]*)\}? ?\{?(?<res_headers>[^}]*)\}? ?"(?<request>(?<method>[A-Z]+)\s(?<url>[^?\s]+)[^"]*)"|(?<message>.+))/
    types actconn:integer,backend:string,backend_queue:integer,beconn:integer,backend_server:string,bytes_read:integer,client_ip:string,client_port:integer,feconn:integer,frontend:string,message:string,pid:integer,ps:string,req_date:string,req_headers:string,req_cookie:string,request:string,res_headers:string,retries:string,res_cookie:string,srv_conn:integer,srv_queue:integer,status_code:integer,syslog_time:string,term_state:string,tc_connect_time:integer,tr_resp_time:integer,tr_receive_time:integer,ta_active_time:integer,tw_queue_time:integer
  </parse>
</source>

# Setup the Prometheus plugin.
<source>
  @type prometheus
  bind 0.0.0.0
  port 24231
  metrics_path /metrics
</source>

# Tag our log types.
<match haproxy.local0.**>
  @type rewrite_tag_filter
  <rule>
    key     frontend
    pattern .
    tag haproxy.http
  </rule>
  <rule>
    key     message
    pattern .
    tag haproxy.general
  </rule>
</match>

# Following Prometheus best practice by converting to base unit.
<filter haproxy.http>
  @type record_modifier
  enable_ruby
  <record>
    ta_active_time_seconds ${record["ta_active_time"].to_f / 1000}
    escaped_url ${record["url"].gsub(/(.*?)([\d]{4,50})(.*)/, '\1XXXXX\3').gsub(/(.*?)([\da-z.]{4,50})(\.js|\.css)/, '\1XXXXX\3').gsub(/(.*)\/([^\/]+)(\..*)/, '\1XXXXX\3').gsub(/(\/\.well-known\/)(.*)/, '\1/XXXXX')}
  </record>
</filter>

# Create the histogram.
<filter haproxy.http>
  @type prometheus
  <metric>
    name http_client_total
    type counter
    desc A count of the requests.
    <labels>
      tag ${tag}
      # Could also label by backend server if desired.
      backend ${backend}
      status_code ${status_code}
      client_ip ${client_ip}
    </labels>
  </metric>
  <metric>
    name http_requests_total
    type counter
    desc A count of the requests.
    <labels>
      tag ${tag}
      # Could also label by backend server if desired.
      backend ${backend}
      status_code ${status_code}
    </labels>
  </metric>
  <metric>
    name http_request_duration_seconds
    type histogram
    desc A histogram of the request duration.
    key ta_active_time_seconds
    # Buckets chosen in mind of relevant SLO.
    buckets 0.1, 0.5, 1, 2.5, 5, 10, 30, 60, 120, 180, 240, 300
    <labels>
      tag ${tag}
      # Could also label by backend server if desired.
      backend ${backend}
      status_code ${status_code}
      method ${method}
      url ${escaped_url}
    </labels>
  </metric>
</filter>

<match **>
  @type stdout
</match>
